// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/jmgilman/go/oci/internal/oras"
)

// Ensure, that ClientMock does implement oras.Client.
// If this is not the case, regenerate this file with moq.
var _ oras.Client = &ClientMock{}

// ClientMock is a mock implementation of oras.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked oras.Client
//		mockedClient := &ClientMock{
//			PullFunc: func(ctx context.Context, reference string, opts *oras.AuthOptions) (*oras.PullDescriptor, error) {
//				panic("mock out the Pull method")
//			},
//			PushFunc: func(ctx context.Context, reference string, descriptor *oras.PushDescriptor, opts *oras.AuthOptions) error {
//				panic("mock out the Push method")
//			},
//		}
//
//		// use mockedClient in code that requires oras.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// PullFunc mocks the Pull method.
	PullFunc func(ctx context.Context, reference string, opts *oras.AuthOptions) (*oras.PullDescriptor, error)

	// PushFunc mocks the Push method.
	PushFunc func(ctx context.Context, reference string, descriptor *oras.PushDescriptor, opts *oras.AuthOptions) error

	// calls tracks calls to the methods.
	calls struct {
		// Pull holds details about calls to the Pull method.
		Pull []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Reference is the reference argument value.
			Reference string
			// Opts is the opts argument value.
			Opts *oras.AuthOptions
		}
		// Push holds details about calls to the Push method.
		Push []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Reference is the reference argument value.
			Reference string
			// Descriptor is the descriptor argument value.
			Descriptor *oras.PushDescriptor
			// Opts is the opts argument value.
			Opts *oras.AuthOptions
		}
	}
	lockPull sync.RWMutex
	lockPush sync.RWMutex
}

// Pull calls PullFunc.
func (mock *ClientMock) Pull(ctx context.Context, reference string, opts *oras.AuthOptions) (*oras.PullDescriptor, error) {
	if mock.PullFunc == nil {
		panic("ClientMock.PullFunc: method is nil but Client.Pull was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Reference string
		Opts      *oras.AuthOptions
	}{
		Ctx:       ctx,
		Reference: reference,
		Opts:      opts,
	}
	mock.lockPull.Lock()
	mock.calls.Pull = append(mock.calls.Pull, callInfo)
	mock.lockPull.Unlock()
	return mock.PullFunc(ctx, reference, opts)
}

// PullCalls gets all the calls that were made to Pull.
// Check the length with:
//
//	len(mockedClient.PullCalls())
func (mock *ClientMock) PullCalls() []struct {
	Ctx       context.Context
	Reference string
	Opts      *oras.AuthOptions
} {
	var calls []struct {
		Ctx       context.Context
		Reference string
		Opts      *oras.AuthOptions
	}
	mock.lockPull.RLock()
	calls = mock.calls.Pull
	mock.lockPull.RUnlock()
	return calls
}

// Push calls PushFunc.
func (mock *ClientMock) Push(ctx context.Context, reference string, descriptor *oras.PushDescriptor, opts *oras.AuthOptions) error {
	if mock.PushFunc == nil {
		panic("ClientMock.PushFunc: method is nil but Client.Push was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Reference  string
		Descriptor *oras.PushDescriptor
		Opts       *oras.AuthOptions
	}{
		Ctx:        ctx,
		Reference:  reference,
		Descriptor: descriptor,
		Opts:       opts,
	}
	mock.lockPush.Lock()
	mock.calls.Push = append(mock.calls.Push, callInfo)
	mock.lockPush.Unlock()
	return mock.PushFunc(ctx, reference, descriptor, opts)
}

// PushCalls gets all the calls that were made to Push.
// Check the length with:
//
//	len(mockedClient.PushCalls())
func (mock *ClientMock) PushCalls() []struct {
	Ctx        context.Context
	Reference  string
	Descriptor *oras.PushDescriptor
	Opts       *oras.AuthOptions
} {
	var calls []struct {
		Ctx        context.Context
		Reference  string
		Descriptor *oras.PushDescriptor
		Opts       *oras.AuthOptions
	}
	mock.lockPush.RLock()
	calls = mock.calls.Push
	mock.lockPush.RUnlock()
	return calls
}
